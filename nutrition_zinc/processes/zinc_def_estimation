** **************************************************************************
** RUNTIME CONFIGURATION
** **************************************************************************
// Set preferences for STATA
	// Clear memory and set memory and variable limits
		clear all
		set mem 12g
		set maxvar 32767
	// Set to run all selected code without pausing
		set more off
	// Set graph output color scheme
		set scheme s1color
	// Remove previous restores
		cap restore, not
	// Reset timer (?)
		timer clear	
	// Define J drive (data) for cluster (UNIX) and Windows (Windows)
		if c(os) == "Unix" {
			global prefix 				"/home/j"
			local data_out 				"/share/epi/risk/zinc/temp/data"			
			set odbcmgr unixodbc
			local logs					"/share/epi/risk/zinc/temp/logs"
		}
		else if c(os) == "Windows" {
			global prefix 				"J:"
			local data_out 				"C:/Users/psur2417/Documents/temp/zinc"
			local logs					"$prefix/WORK/05_risk/risks/nutrition_zinc/logs"

		}
	// Close previous logs
		cap log close

// Call in arguments
	args iso3 draws_required

	di in green "iso3 is `iso3'"
	di in green "draws_required is `draws_required'"

// Pull in data (if prep section is skipped)
		use ``iso3'_zinc_def_data_prepped', clear
	
	forvalues draw = 0/`draws_from_zero' {
		
		// FOOD COMPOSITION: Calculate amount of daily zinc/phytate for each item in each country-year, using KRW's food composition information and also taking into account regional processing assumptions as previously generated
			// Zinc
				gen jjf_mgzn_`draw' = ((((1 - prop_extracted) * jjf_kcal_`draw') / kcal) * zinc) + (((prop_extracted * jjf_kcal_`draw') / kcal) * (zinc * zn_after_ext))

				replace jjf_mgzn_`draw' = ((jjf_kcal_`draw' / kcal) * zinc) // toggle this to see values without processing assumptions 
			
			// Phytate
				gen mgphyt_raw_`draw' = (((1 - prop_extracted) * (1 - prop_fermented) * jjf_kcal_`draw') / kcal) * phytate
				gen mgphyt_ext_ferm_`draw' = ((prop_extracted * prop_fermented * jjf_kcal_`draw') / kcal) * (phytate * phyt_after_ferm * phyt_after_ext)
				gen mgphyt_ext_only_`draw' = ((prop_extracted * (1 - prop_fermented) * jjf_kcal_`draw') / kcal) * (phytate * phyt_after_ext)
				gen mgphyt_ferm_only_`draw' = ((((1 - prop_extracted) * prop_fermented) * jjf_kcal_`draw') / kcal) * (phytate * phyt_after_ferm)
				
				// Wheat Assumption: Whole Wheat (unextracted) is never fermented (assumption borrowed by Ryan Wessells from earlier work by colleague Sarah Wuehler)
					replace mgphyt_ferm_only_`draw' = ((((1 - prop_extracted) * prop_fermented) * jjf_kcal_`draw') / kcal) * phytate if item == 2511
				
				gen jjf_mgphyt_`draw' = mgphyt_raw_`draw' + mgphyt_ext_ferm_`draw' + mgphyt_ext_only_`draw' + mgphyt_ferm_only_`draw'

				replace jjf_mgphyt_`draw' = (jjf_kcal_`draw' / kcal) * phytate // toggle this to see values without processing assumptions 
					


			// Convert to mmol for use in miller equation later => note that i named them to match Miller's specifications
				gen TDZ_`draw' = jjf_mgzn_`draw' / 65.4
				gen TDP_`draw' = jjf_mgphyt_`draw' / 660
				
	}
		
		// Output pre-collapse dataset
			preserve
			
			local by_item_variables "kcal mgzn mgphyt" 
		
			foreach var in `by_item_variables' {
			
				egen jjf_`var'_mean = rowmean(jjf_`var'*)
				egen jjf_`var'_upper = rowpctile(jjf_`var'*), p(97.5)
				egen jjf_`var'_lower = rowpctile(jjf_`var'*), p(2.5)

				forvalues draw = 0/`draws_from_zero' {

					drop jjf_`var'_`draw'
				
				}
				
			}
			
			drop mgphyt* TDZ* TDP*
			
			codebook jjf_mgphyt_mean if item == 2511
			
			saveold `data_out'/`iso3'_zinc_by_item_`draws_required'_draws.dta, replace
			
			restore
			
			
			
		// NET DIET: Collapse the amount of daily zinc/phytate for all items to each country-year to show entire diet
			collapse(sum) jjf* TDZ* TDP*, by(gbd_region iso3 year) fast
	
	forvalues draw = 0/`draws_from_zero' {
	
		// PZMR: Phytate Zinc Molar Ratio
			gen jjf_p_zn_`draw' = (jjf_mgphyt_`draw'/660) / (jjf_mgzn_`draw'/65.4)

		// MILLER EQUATION WITH UNCERTAINTY - Merge on the draws:
			// Merge on draws of the parameters specified in the Miller Equation (created in the above section)
				cap gen id = 1 // captured so that we when loop back through, it will not kill the loop when it tries to recreate this variable
				merge m:1 id using ``iso3'_miller_parameter_draws', nogen
				local miller_status "_new_miller_unc"
				
	forvalues draw = 0/`draws_from_zero' {

		// MILLER EQUATION (specified on p.4 in methods section) - Calculate:
			gen jjf_absznmiller_`draw' = 0.5 * (aMAX_`draw' + TDZ_`draw' + kR_`draw' * (1+TDP_`draw'/kP_`draw') - sqrt((aMAX_`draw' + TDZ_`draw' + kR_`draw' * (1+TDP_`draw'/kP_`draw'))^2 - 4 * aMAX_`draw' * TDZ_`draw'))
				replace jjf_absznmiller_`draw' = jjf_absznmiller_`draw' * 65.4 // convert back into mg from millimoles
				
			gen jjf_fazmiller_`draw' = (0.5/TDZ_`draw') * (aMAX_`draw' + TDZ_`draw' + kR_`draw' * (1+TDP_`draw'/kP_`draw') - sqrt((aMAX_`draw' + TDZ_`draw' + kR_`draw' * (1+TDP_`draw'/kP_`draw'))^2 - 4 * aMAX_`draw' * TDZ_`draw'))
					
	}	
				
			// Drop extraneous variables (captured just in case you are working with a version that uses different variables)
				cap drop TDZ* 
				cap drop TDP* 
				cap drop aMAX* 
				cap drop kR* 
				cap drop kP*
				cap drop CONS*
				cap drop PZMR*
				
		// Tempfile and Save to prep for merge onto population data
			tempfile `iso3'_zinc_estimates
			save ``iso3'_zinc_estimates'
		
		// Merge onto IHME population data
			use `population_data' if iso3 == "`iso3'", clear
			merge m:1 iso3 year using ``iso3'_zinc_estimates', keep(match) nogen
		
		// Generate the number of pregnant/lactating women using the method outlined in KRW's paper on page 4
			// Pregnant Women = Estimated as the # of children < 1 year of age multiplied by 0.729 (not sure why exactly..find out later)
				egen country_year = concat(iso3 year)
				egen under1 = total(pop) if age < 1 & sex == 3, by(country_year)
					replace under1 = under1 * 0.729
					egen under1_filled = mean(under1), by(country_year) // needs to be done in this way because the replace function doesn't have the same functions as egen
			// Lactating women = Estimated as the # of children under 6 months of age. We don't have this variable so I will just use the # of children under 1 year of age
				egen under6m = total(pop) if age < 1 & sex == 3, by(country_year)
					replace under6m = under6m * 0.5 // assuming that ages are equally distributed IE half of the people under age 1 are under 6 months (could need to revisit this assumption with more data)
					egen under6m_filled = mean(under6m), by(country_year) // needs to be done in this way because the replace function doesn't have the same functions as egen
			
			// Since we don't care about children under 6months in this analysis (because we are correcting for their existence by including the preg/lactating women categories) use the lower age groups as placeholders for preg/lactating values
				replace age = 88 if age == 0 // pregnant women placeholder
					replace pop = under1_filled if age == 88
				replace age = 89 if age == float(.01) // lactating women placeholder - NOTE: I needed to use this float command because the precision of age .01 was throwing off my logic. It is probably being stored as .010000 or something to that effect but this workaround fixes it
					replace pop = under6m_filled if age == 89
					
				forvalues x = 88/89 {	
				
					drop if age == `x' & sex != 2 // these groups only apply to women
					
				}
			
			// Drop the both sex / all age groups so that we are not double-counting
				drop if sex == 3
				drop if age == 99
				
			// Finally, net out the pregnant and lactating women in equal proportions from the women between ages 15 - 45 so we are not double-counting them. (NOTE: May need to revisit this assumption later if we have more data on what age groups bear most of the pregnancy burden)
				replace pop = pop - (under1_filled + under6m_filled) / 7 if age >= 15 & age <= 45 & sex == 2
				
				// Drop extraneous variables
					drop under*
				
		// Generate physiological zinc requirements based on age
			gen PZR_IZINCG = . // generate this one using the International Zinc Nutrition Consultative Group's estimates
				replace PZR_IZINCG = (1.86 + .70) if age == 88 // lactating women, once again using the assumption that they are over 19 (NOTE: May need to revisit this assumption later see above note)
				replace PZR_IZINCG = (1.86 + 1.00) if age == 89 // pregnant women, once again using the assumption that they are over 19 (NOTE: May need to revisit this assumption later see above note)			
				replace PZR_IZINCG = .84 if age == .1
				replace PZR_IZINCG = .53 if age >= 1 & age <= 3
				replace PZR_IZINCG = .83 if age >= 4 & age <= 8	
				replace PZR_IZINCG = 1.53 if age >= 9 & age <= 13
				replace PZR_IZINCG = 2.52 if age >= 14 & age <= 18 & sex == 1
				replace PZR_IZINCG = 1.98 if age >= 14 & age <= 18 & sex == 2
				replace PZR_IZINCG = 2.69 if age >= 19 & sex == 1
				replace PZR_IZINCG = 1.86 if age >= 19 & sex == 2
				
			gen PZR_IOM = . // generate this one using the Food and Nutrition Board of the Institute of Medicine's estimates
				replace PZR_IOM = (3.30 + .39) if age == 88 // lactating women, once again using the assumption that they are over 19 (NOTE: May need to revisit this assumption later see above note)
				replace PZR_IOM = (3.30 + 1.35) if age == 89 // pregnant women, once again using the assumption that they are over 19 (NOTE: May need to revisit this assumption later see above note)		
				replace PZR_IOM = .84 if age == .1
				replace PZR_IOM = .74 if age >= 1 & age <= 3
				replace PZR_IOM = 1.20 if age >= 4 & age <= 8		
				replace PZR_IOM = 2.12 if age >= 9 & age <= 13
				replace PZR_IOM = 3.37 if age >= 14 & age <= 18 & sex == 1
				replace PZR_IOM = 3.02 if age >= 14 & age <= 18 & sex == 2
				replace PZR_IOM = 3.84 if age >= 19 & sex == 1
				replace PZR_IOM = 3.30 if age >= 19 & sex == 2
		
		// Using the population distribution for each country year, age-weight the PZR to create a mean for given country-years
			egen pop_tot = total(pop), by(country_year)
			gen age_weight = pop / pop_tot
			foreach variable of varlist PZR* {
			
				replace `variable' = `variable' * age_weight
				bysort country_year: egen `variable'_weighted = sum(`variable')
				
			}

		// Contract variables back to the country year level, as we no longer need the age distribution using this method
			contract gbd_region iso3* year jjf* PZR*weighted
				drop _freq
			rename PZR*_weighted PZR*
		
		// Use only the IZINCG PZR at this time
			rename PZR_IZINCG jjf_przn_mean
			
	// Merge on KRW's PZR estimates (having trouble getting mine to match up due to some small methodological differences) -> quick fix is just to use hers for this round while I continue to refine the method
		preserve
		use `krw_estimates', clear
		keep iso3 krw_przn_mean year
		rename krw_przn_mean jjf_przn_mean
		tempfile krw_przn_mean
		save `krw_przn_mean', replace
		restore
		
		drop jjf_przn_mean
		merge 1:1 iso3 year using `krw_przn_mean', keep(mat) nogen
			
	forvalues draw = 0/`draws_from_zero' {		
	
		// Using mean zinc absorption as calculated by the miller equation, calculate what percent of their PZR the average person is absorbing 
			gen jjf_przn_earpctmiller_`draw' = jjf_absznmiller_`draw' / jjf_przn_mean
				replace jjf_przn_earpctmiller_`draw' = jjf_przn_earpctmiller_`draw' * 100 // convert to percentile
				
		// Use the Normal Probability Density function to estimate the percent of population at risk of zinc deficiency with the assumption of normal distribution & 25% CV for inter-individual intake
			cap gen CV = .25 // captured so that we when loop back through, it will not kill the loop when it tries to recreate this variable
			gen SD_`draw' = jjf_absznmiller_`draw' * CV
			gen jjf_przn_pctdefmiller_`draw' = normal((jjf_przn_mean-jjf_absznmiller_`draw')/SD_`draw') // Using this formula instead of the normal density function which was given odd results
				replace jjf_przn_pctdefmiller_`draw' = jjf_przn_pctdefmiller_`draw' * 100 // Convert to percentages
		
	// Final Modifications/cleanup
	sort iso3 year

// Create means and CIs using the draws, then drop the draws
		local comparison_variables "kcal mgzn mgphyt p_zn absznmiller fazmiller przn_earpctmiller przn_pctdefmiller" 
		
		foreach var in `comparison_variables' {
		
			egen jjf_`var'_mean = rowmean(jjf_`var'*)	
			egen jjf_`var'_median = rowmedian(jjf_`var'*) // try median for exp version
			egen jjf_`var'_upper = rowpctile(jjf_`var'*), p(97.5)
			egen jjf_`var'_lower = rowpctile(jjf_`var'*), p(2.5)

			forvalues draw = 0/`draws_from_zero' {

				drop jjf_`var'_`draw'
			
			}
			
		}
		
		// Drop other extraneous variables
			drop CV SD*
			
	// Order/sort vars properly
		foreach var in `comparison_variables' {
			order jjf_`var'_lower jjf_`var'_mean jjf_`var'_upper 
		}
	
		order iso3 year gbd_region jjf_kcal jjf_przn_mean PZR_IOM
		
	// Save and output
		saveold `data_out'/`iso3'_jjf_zinc_def_estimates_`draws_required'_draws`miller_status'.dta, replace

preserve
use `krw_estimates', clear

// Tempfile/save
	tempfile `iso3'_comparison
	save ``iso3'_comparison', replace
restore
merge 1:1 iso3 year using ``iso3'_comparison', keep(mat) nogen 

// Rename KRW's przn mean to help the below loop work
	rename krw_przn_mean krw_przn

// Gen comparison variables
	local comparison_variables "kcal mgzn mgphyt p_zn absznmiller fazmiller przn przn_earpctmiller przn_pctdefmiller" 
	
	foreach var in `comparison_variables' {
	
		gen diff_`var' = jjf_`var'_mean - krw_`var'

	}

// Save and output
	save `data_out'/`iso3'_jjf_zinc_def_estimates_comparison`miller_status'.dta, replace

preserve	
// Cleanup names
	rename *_przn_pctdefmiller* *_pctdefmiller*
	rename *_przn_earpctmiller* *_earpctmiller*	
	rename jjf_* *
	
// Add in placeholder CIs for the physiological zinc requirement variable so that my later graph loop will still work properly
	gen przn_lower = przn_mean
	gen przn_upper = przn_mean

	
// Add order for graph outputting
	gen order_kcal = 1
	gen order_mgzn = 2
	gen order_mgphyt = 3
	gen order_absznmiller = 4
	gen order_fazmiller = 5
	gen order_przn = 6
	gen order_earpctmiller = 7
	gen order_pctdefmiller = 8
 
// Add labels
	gen label_kcal = "Daily Kilocalories/Capita"
	gen label_mgzn = "Daily Mg of Zinc/Capita"
	gen label_mgphyt = "Daily Mg of Phytate/Capita"
	gen label_absznmiller = "Daily Total Absorbed Zinc/Capita"
	gen label_fazmiller = "Fractional Absorption of Zinc"
	gen label_przn = "Average National Zinc Requirement"
	gen label_earpctmiller = "% of Estimated Average Zinc Requirement"
	gen label_pctdefmiller = "% Estimated to be at Risk of Zinc Deficiency"
 
// Save and output for graphing
	save `data_out'/`iso3'_jjf_zinc_def_estimates_comparison_graph`miller_status'.dta, replace
